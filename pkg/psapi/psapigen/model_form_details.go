// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pokemon Studio API
 *
 * API for the Pokemon Studio
 *
 * API version: 0.0.1
 */

package psapigen

// FormDetails - An object containing the data of a pokemon form (ev, iv, ...)
type FormDetails struct {

	// The translated name of the pokemon
	Name string `json:"name,omitempty"`

	// The translated description of the pokemon
	Description string `json:"description,omitempty"`

	// The form number
	Form *int32 `json:"form,omitempty"`

	// The height
	Height float32 `json:"height,omitempty"`

	// The weight
	Weight float32 `json:"weight,omitempty"`

	Type1 *TypePartial `json:"type1,omitempty"`

	Type2 *TypePartial `json:"type2,omitempty"`

	// The base HP stat
	BaseHp int32 `json:"baseHp,omitempty"`

	// The base attack stat
	BaseAtk int32 `json:"baseAtk,omitempty"`

	// The base defense stat
	BaseDfe int32 `json:"baseDfe,omitempty"`

	// The base speed stat
	BaseSpd int32 `json:"baseSpd,omitempty"`

	// The base special attack stat
	BaseAts int32 `json:"baseAts,omitempty"`

	// The base special defense stat
	BaseDfs int32 `json:"baseDfs,omitempty"`

	// The HP EV given
	EvHp *int32 `json:"evHp,omitempty"`

	// The attack EV given
	EvAtk *int32 `json:"evAtk,omitempty"`

	// The defense EV given
	EvDfe *int32 `json:"evDfe,omitempty"`

	// The speed EV given
	EvSpd *int32 `json:"evSpd,omitempty"`

	// The special attack EV given
	EvAts *int32 `json:"evAts,omitempty"`

	// The special defense EV given
	EvDfs *int32 `json:"evDfs,omitempty"`

	// The experience type
	ExperienceType string `json:"experienceType,omitempty"`

	// The base experience
	BaseExperience int32 `json:"baseExperience,omitempty"`

	// The base loyalty
	BaseLoyalty int32 `json:"baseLoyalty,omitempty"`

	// The catch rate
	CatchRate int32 `json:"catchRate,omitempty"`

	// The female rate
	FemaleRate float32 `json:"femaleRate,omitempty"`

	// The breed groups
	BreedGroups []string `json:"breedGroups,omitempty"`

	// The number of steps before hatching
	HatchSteps int32 `json:"hatchSteps,omitempty"`

	// The symbol of the baby form
	BabyDbSymbol string `json:"babyDbSymbol,omitempty"`

	// The form number of the baby form
	BabyForm *int32 `json:"babyForm,omitempty"`

	// The list of items held
	ItemHeld []string `json:"itemHeld,omitempty"`

	// The image symbol of the form
	Image string `json:"image,omitempty"`
}

// AssertFormDetailsRequired checks if the required fields are not zero-ed
func AssertFormDetailsRequired(obj FormDetails) error {
	if obj.Type1 != nil {
		if err := AssertTypePartialRequired(*obj.Type1); err != nil {
			return err
		}
	}
	if obj.Type2 != nil {
		if err := AssertTypePartialRequired(*obj.Type2); err != nil {
			return err
		}
	}
	return nil
}

// AssertFormDetailsConstraints checks if the values respects the defined constraints
func AssertFormDetailsConstraints(obj FormDetails) error {
	if obj.Type1 != nil {
		if err := AssertTypePartialConstraints(*obj.Type1); err != nil {
			return err
		}
	}
	if obj.Type2 != nil {
		if err := AssertTypePartialConstraints(*obj.Type2); err != nil {
			return err
		}
	}
	return nil
}
